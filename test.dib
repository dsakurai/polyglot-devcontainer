#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!fsharp

let execute_state_sequence state sequence =
    let f = (Seq.reduce (>>) sequence) // composite
    f state

// Use it like
// cube |>>>| [ F; U; f]
let (|>>>|) = execute_state_sequence

#!fsharp

let F state =
  printf "F"
  state
  
let U state =
  printf "U"
  state
 

#!fsharp

0 |>>>| [ F; U; F ]

#!fsharp

0 |> F |> U

#!fsharp

"hello" |> F |> U

#!fsharp

execute_state_sequence 0 [ F; U ]

#!fsharp

let rotateCube() = [ F; U ]

// we can't write
//     rotateCube = [ F; U ]
// because tye types of functions F and U are not decided yet.

#!fsharp

execute_state_sequence 0 (rotateCube())

#!fsharp

// composition
0 |> (F >> U)
